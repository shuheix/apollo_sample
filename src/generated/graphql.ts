import { gql } from '@apollo/client';
import * as Apollo from '@apollo/client';
export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
export type MakeEmpty<T extends { [key: string]: unknown }, K extends keyof T> = { [_ in K]?: never };
export type Incremental<T> = T | { [P in keyof T]?: P extends ' $fragmentName' | '__typename' ? T[P] : never };
const defaultOptions = {} as const;
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: { input: string; output: string; }
  String: { input: string; output: string; }
  Boolean: { input: boolean; output: boolean; }
  Int: { input: number; output: number; }
  Float: { input: number; output: number; }
  /** An ISO 8601-encoded datetime */
  ISO8601DateTime: { input: any; output: any; }
};

export type Channel = Node & {
  __typename?: 'Channel';
  createdAt: Scalars['ISO8601DateTime']['output'];
  id: Scalars['ID']['output'];
  messageCount: Scalars['Int']['output'];
  messages: Array<Message>;
  name: Scalars['String']['output'];
  updatedAt: Scalars['ISO8601DateTime']['output'];
};

/** Autogenerated input type of CreateChannel */
export type CreateChannelInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  workspaceId: Scalars['ID']['input'];
};

/** Autogenerated return type of CreateChannel. */
export type CreateChannelPayload = {
  __typename?: 'CreateChannelPayload';
  channel: Channel;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
};

/** Autogenerated input type of CreateMessage */
export type CreateMessageInput = {
  channelId: Scalars['ID']['input'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  content: Scalars['String']['input'];
};

/** Autogenerated return type of CreateMessage. */
export type CreateMessagePayload = {
  __typename?: 'CreateMessagePayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  message: Message;
};

/** Autogenerated input type of CreateWorkspace */
export type CreateWorkspaceInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  name: Scalars['String']['input'];
};

/** Autogenerated return type of CreateWorkspace. */
export type CreateWorkspacePayload = {
  __typename?: 'CreateWorkspacePayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  workspace: Workspace;
};

export type Message = Node & {
  __typename?: 'Message';
  content: Scalars['String']['output'];
  createdAt: Scalars['ISO8601DateTime']['output'];
  id: Scalars['ID']['output'];
  updatedAt: Scalars['ISO8601DateTime']['output'];
};

/** Autogenerated return type of MessageReceived. */
export type MessageReceivedPayload = {
  __typename?: 'MessageReceivedPayload';
  count: Scalars['Int']['output'];
};

export type Mutation = {
  __typename?: 'Mutation';
  createChannel?: Maybe<CreateChannelPayload>;
  createMessage?: Maybe<CreateMessagePayload>;
  createWorkspace?: Maybe<CreateWorkspacePayload>;
};


export type MutationCreateChannelArgs = {
  input: CreateChannelInput;
};


export type MutationCreateMessageArgs = {
  input: CreateMessageInput;
};


export type MutationCreateWorkspaceArgs = {
  input: CreateWorkspaceInput;
};

/** An object with an ID. */
export type Node = {
  /** ID of the object. */
  id: Scalars['ID']['output'];
};

export type Query = {
  __typename?: 'Query';
  channels: Array<Channel>;
  /** Fetches an object given its ID. */
  node?: Maybe<Node>;
  /** Fetches a list of objects given a list of IDs. */
  nodes: Array<Maybe<Node>>;
  workspaces: Array<Workspace>;
};


export type QueryNodeArgs = {
  id: Scalars['ID']['input'];
};


export type QueryNodesArgs = {
  ids: Array<Scalars['ID']['input']>;
};

export type Subscription = {
  __typename?: 'Subscription';
  messageReceived: MessageReceivedPayload;
};

export type Workspace = Node & {
  __typename?: 'Workspace';
  channels: Array<Channel>;
  createdAt: Scalars['ISO8601DateTime']['output'];
  id: Scalars['ID']['output'];
  name: Scalars['String']['output'];
  updatedAt: Scalars['ISO8601DateTime']['output'];
};

export type OnMessageReceivedSubscriptionVariables = Exact<{ [key: string]: never; }>;


export type OnMessageReceivedSubscription = { __typename?: 'Subscription', messageReceived: { __typename?: 'MessageReceivedPayload', count: number } };


export const OnMessageReceivedDocument = gql`
    subscription onMessageReceived {
  messageReceived {
    count
  }
}
    `;

/**
 * __useOnMessageReceivedSubscription__
 *
 * To run a query within a React component, call `useOnMessageReceivedSubscription` and pass it any options that fit your needs.
 * When your component renders, `useOnMessageReceivedSubscription` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the subscription, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useOnMessageReceivedSubscription({
 *   variables: {
 *   },
 * });
 */
export function useOnMessageReceivedSubscription(baseOptions?: Apollo.SubscriptionHookOptions<OnMessageReceivedSubscription, OnMessageReceivedSubscriptionVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useSubscription<OnMessageReceivedSubscription, OnMessageReceivedSubscriptionVariables>(OnMessageReceivedDocument, options);
      }
export type OnMessageReceivedSubscriptionHookResult = ReturnType<typeof useOnMessageReceivedSubscription>;
export type OnMessageReceivedSubscriptionResult = Apollo.SubscriptionResult<OnMessageReceivedSubscription>;